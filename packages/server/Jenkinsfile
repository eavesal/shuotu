pipeline{
    agent{
        label "nodejs"
    }

    environment {
        DOCKER_CREDENTIAL_ID = 'docker-hub'
        KUBECONFIG_CREDENTIAL_ID = 'kubeconfig'

        WORKING_SERVICE = 'server'

        REGISTRY = 'hub.docker.com'
        DOCKERHUB_NAMESPACE = 'lijingyu68'
        APP_NAME = 'shuotu.fun'
    }

    stages{

        stage ('debug') {
            steps {
                sh 'echo $DOCKER_USERNAME'
            }
        }

        stage ('Checkout') {
            steps {
                checkout(scm)
            }
        }

        stage ("Install") {
            steps {
                container ('nodejs') {
                    dir ("packages/${WORKING_SERVICE}") {
                        sh 'yarn install'
                    }
                }
            }
        }

        stage ("Build"){
            steps {
                container ('nodejs') {
                    dir ("packages/${WORKING_SERVICE}") {
                        sh 'yarn run build'

                        // script {
                        //     def image = docker.build("REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER")
                        //     image.push()
                        // }
                        sh 'docker build -u jenkins:999 -f Dockerfile -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER .'
                        withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD', usernameVariable : 'DOCKER_USERNAME', credentialsId : "$DOCKER_CREDENTIAL_ID")]) {
                            sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
                            sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER'
                        }
                    }       
                }
            }
        }
    }

    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}
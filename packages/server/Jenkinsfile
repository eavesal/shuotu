pipeline{
    agent {
        label "nodejs"
    }

    environment {
        DOCKER_CREDENTIAL_ID = 'docker-hub'
        KUBECONFIG_CREDENTIAL_ID = 'kubeconfig'

        WORKING_SERVICE = 'server'

        REGISTRY = 'registry.hub.docker.com'
        DOCKERHUB_NAMESPACE = 'lijingyu68'
        APP_NAME = 'shuotu.fun'
    }

    stages {

        stage ('debug') {
            steps {
                sh 'echo $DOCKER_USERNAME'
            }
        }

        stage ('Checkout') {
            steps {
                checkout(scm)
            }
        }

        stage ("Install") {
            steps {
                container ('nodejs') {
                    dir ("packages/${WORKING_SERVICE}") {
                        sh 'yarn install'
                    }
                }
            }
        }

        stage ("Build") {
            steps {
                container ('nodejs') {
                    dir ("packages/${WORKING_SERVICE}") {
                        sh 'yarn run build'
                        sh 'docker build -f Dockerfile -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER .'
                        withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD', usernameVariable : 'DOCKER_USERNAME', credentialsId : "$DOCKER_CREDENTIAL_ID")]) {
                            sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
                            sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER'
                        }
                    }       
                }
            }
        }

        stage('Push latest'){
           when {
                branch 'master'
           }
           steps{
                container ('nodejs') {
                    sh 'docker tag  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest '
                    sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest '
                }
           }
        }

        stage ('deploy to dev') {
            when {
                branch 'master'
            }
            steps {
                input(id: 'deploy-to-dev', message: 'deploy to shuotu-dev?')
                kubernetesDeploy(configs: 'deploy/dev/**', enableConfigSubstitution: true, kubeconfigId: "$KUBECONFIG_CREDENTIAL_ID")
            }
        }
    }

    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}